generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  posts     Post[]
  createdAt DateTime @default(now())
  savedPosts SavedPost[]
}

model Post {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  price       Int
  images      String[]
  address     String
  city        String
  bedroom     Int
  bathroom    Int
  latitude    String
  longitude   String
  type        Type
  property    Property
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  postDetails PostDetail[]
  createdAt   DateTime     @default(now())
  savedPosts  SavedPost[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  desc        String
  utilities   String?
  pet         String?
  income      String?
  size        Int?
  school      Int?
  bus         Int?
  restaurant  Int?
  post        Post     @relation(fields: [postId], references: [id])
  postId      String   @db.ObjectId // Removed @unique to allow multiple PostDetails for one Post
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  @@unique([userId, postId]) // Composite unique constraint ensures user-post combinations are unique
}
